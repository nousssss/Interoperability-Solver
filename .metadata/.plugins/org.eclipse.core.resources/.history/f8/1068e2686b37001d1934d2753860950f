package org.processmining.plugins.nouss;

import org.deckfour.xes.classification.XEventClass;
import org.deckfour.xes.classification.XEventClassifier;
import org.deckfour.xes.info.XLogInfo;
import org.deckfour.xes.info.XLogInfoFactory;
import org.deckfour.xes.info.impl.XLogInfoImpl;
import org.deckfour.xes.model.XLog;
import org.processmining.contexts.uitopia.annotations.UITopiaVariant;
import org.processmining.framework.plugin.PluginContext;
import org.processmining.framework.plugin.annotations.Plugin;
import org.processmining.framework.plugin.annotations.PluginVariant;
import org.processmining.models.connections.petrinets.EvClassLogPetrinetConnection;
import org.processmining.models.graphbased.directed.petrinet.Petrinet;
import org.processmining.models.graphbased.directed.petrinet.PetrinetGraph;
import org.processmining.models.graphbased.directed.petrinet.elements.Transition;
import org.processmining.models.semantics.petrinet.Marking;
import org.processmining.plugins.connectionfactories.logpetrinet.TransEvClassMapping;
import org.processmining.plugins.etconformance.ETCPlugin;
import org.processmining.plugins.etconformance.ETCResults;
import org.processmining.plugins.etconformance.ETCSettings;


@Plugin
(
	name = "nouss does conformance checking", 
	parameterLabels = {}, 
	returnLabels = { "ETConformance Results", "MDT"}, 
	returnTypes = { ETCResults.class,XLog.class })
 



public class ConformanceChecking {
	
	// Creating a map between the log and the Petri net model
  private static TransEvClassMapping constructMapping(PetrinetGraph net, XLog log,
			XEventClass dummyEvClass, XEventClassifier eventClassifier) 
  {
	       //creating a map
		TransEvClassMapping mapping = new TransEvClassMapping(eventClassifier,dummyEvClass);
		   // extracting the log info
		XLogInfo summary = XLogInfoFactory.createLogInfo(log, eventClassifier);
		
		 // looping through every transition in the petri net :
		// for each transition, we compare its label with the ID of all event classes in the log
		// then we add them as an entry to the map if transition.label == event.id
		for (Transition t : net.getTransitions())
		   {
				boolean mapped = false;
				for (XEventClass evClass : summary.getEventClasses().getClasses()) 
				 {
					String id = evClass.getId();
					String label = t.getLabel();
					id = id.substring(0, id.length()-1);
					if (label.equals(id)) 
					 {
					   mapping.put(t, evClass);
					   mapped = true;
					   break;
					 }
				  }
		   }
		
		return mapping;
   }
  
	
	public static void mapping() throws Exception 
	{
		
	}
	
	@UITopiaVariant
	  (
	     affiliation = "CDTA", 
	     author = "Ines bachiri", 
	     email = "ji_bachiri@esi.dz"
	  )
	@PluginVariant 
	  (
		 variantLabel = "Nouss does conformance checking", 
		 requiredParameterLabels = { }
	  )
	
	public static Object[] check(PluginContext context) throws Exception {
		   //import the log 
		XLog log = ImportLog.readLogFromFile();
		System.out.println("I imported the xes");
		   // import the petrinet
		Object[] petri = ImportPetriNets.readPNFromFile();
		Petrinet net = (Petrinet) petri[0];
		Marking initialMarking = (Marking) petri[1];
		System.out.println("I imported the pnml");
		   // creating a dummy event class (for transitions with no corresponding stuff in map
		XEventClass dummyEvClass = new XEventClass("DUMMY", 99999);
		
		XEventClassifier eventClassifier = XLogInfoImpl.STANDARD_CLASSIFIER;
		   // map between the log and the petrinet
		TransEvClassMapping mapping = constructMapping(net, log, dummyEvClass,eventClassifier); 
		System.out.println("I did the mapping");
		   // creating a connection to be stored
		EvClassLogPetrinetConnection evClassLogPetrinetConnection = new
		EvClassLogPetrinetConnection("", net, log, eventClassifier, mapping);
		System.out.println(log);
		
		   //Create the result object to store the settings on it
		ETCResults res = new ETCResults();
		ETCSettings sett = new ETCSettings(res);
		
		ETCPlugin etcPlugin = new ETCPlugin();
		Object[] etcResults = etcPlugin.doETC(context, log, net, initialMarking,mapping, res);
		/*ETCResults resNew = (ETCResults) etcResults[0];
		System.out.println("results :");
		System.out.println("non fit: " + resNew.getnNonFitTraces());
		System.out.println("non fit: " +resNew.getEscTh());
		System.out.println("non fit: " +resNew.getEtcp());*/
		return etcResults;
	}
	

	
	
}
